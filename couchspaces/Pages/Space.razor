@page "/space/{spaceId}"
@using couchspaces.Components
@using couchspaces.Models
@using couchspacesShared.Models
@using couchspacesShared.Services
@inject NavigationManager Navigation
@inject SpaceService SpaceService
@inject SignalRService SignalRService
@inject IJSRuntime JsRuntime
@inject UserService UserService

<AuthorizeView>
    <Authorized>
        <MudContainer MaxWidth="MaxWidth.Small" Class="mx-auto mt-12">
            <MudPaper Elevation="2" Class="pa-6 rounded-lg shadow-soft" Style="background-color: #f8f9fa;">
                <MudGrid>
                    <MudItem xs="2" class="d-flex align-items-right mb-2">
                        <MudTooltip Text="@connectionStatus">
                            <MudIcon Icon="@GetConnectionStatusIcon()" Color="@GetConnectionStatusColor()" aria-label="Connection Status" />
                        </MudTooltip>
                    </MudItem>
                    <MudItem xs="10" class="d-flex align-items-left mb-2">
                        <MudText Typo="Typo.h6">Watching: @contentTitle</MudText>
                    </MudItem>
                    <MudItem xs="12" class="mb-2" Style="background-color: #f0f0f0; padding: 2px; border-radius: 6px;">
                        <MudText Typo="Typo.subtitle2">
                            <MudIconButton Icon="@Icons.Material.Filled.GroupAdd" Color="Color.Dark" />
                            <b>Invite Friends:</b> @spaceId
                            <MudIconButton Icon="@Icons.Material.Filled.ContentCopy" OnClick="CopySpaceId" Color="Color.Dark" />
                        </MudText>
                    </MudItem>
                    <MudItem xs="12" class="mb-2">
                        
                    </MudItem>
                    <MudItem xs="12" class="mb-2">
                        <MudText Typo="Typo.h6">Start from current time or use SyncStart?</MudText>
                    </MudItem>
                    <MudItem xs="12" class="mb-2">
                        <MudButton OnMouseDown="OnReadyPress" OnMouseUp="OnReadyRelease" OnTouchStart="OnReadyPress" OnTouchEnd="OnReadyRelease" Color="Color.Primary" Variant="Variant.Filled" Class="ready-button">
                            Hold to indicate you are ready
                        </MudButton>
                    </MudItem>
                    @if (spaceType != null)
                    {
                        <MudItem xs="12" class="mb-2">
                            <MudText Typo="Typo.h6">Content Type: @spaceType.Name</MudText>
                        </MudItem>
                    }
                    @if (!string.IsNullOrWhiteSpace(streamingPlatform))
                    {
                        <MudItem xs="12" class="mb-2">
                            <MudText Typo="Typo.h6">Platform: @streamingPlatform</MudText>
                        </MudItem>
                    }
                    @if (!string.IsNullOrWhiteSpace(streamingLink))
                    {
                        <MudItem xs="12" class="mb-2">
                            <MudText Typo="Typo.h6">Streaming Link: @streamingLink</MudText>
                        </MudItem>
                    }
                    <MudItem xs="12" class="mb-2">
                        <UserListComponent SpaceId="@spaceId" />
                    </MudItem>
                    <MudItem xs="12" class="mb-2">
                        @if (currentUser != null)
                        {
                            <ChatComponent CurrentUser="@currentUser" SpaceId="@spaceId" />
                        }
                    </MudItem>
                    <MudItem xs="12" class="mb-2">
                        <ReactionsComponent SpaceId="@spaceId" />
                    </MudItem>
                  @*   <MudItem xs="12" class="mb-2">
                        <MediaComponent SpaceId="@spaceId" />
                    </MudItem>
                    <MudItem xs="12" class="mb-2">
                        <ShowEventComponent SpaceId="@spaceId" />
                    </MudItem>
                    <MudItem xs="12" class="mb-2">
                        <TimestampComponent SpaceId="@spaceId" />
                    </MudItem>
                    <MudItem xs="12" class="mb-2">
                        <PlayPauseComponent SpaceId="@spaceId" />
                    </MudItem>
                    <MudItem xs="12" class="send-react-container d-flex justify-content-between align-items-center mt-4">
                        <SendComponent SpaceId="@spaceId" />
                        <ReactComponent SpaceId="@spaceId" />
                    </MudItem> *@
                    </MudGrid>
                </MudPaper>
            </MudContainer>
        </Authorized>
        <NotAuthorized>
            <MudText Typo="Typo.h6">You are not authorized to view this space. Redirecting...</MudText>
            <MudAlert>Unauthorized</MudAlert>
        </NotAuthorized>
    </AuthorizeView>

@code {
    [Parameter]
    public required string spaceId { get; set; }

    private string spaceName = string.Empty;
    private string contentTitle = string.Empty;
    private string streamingLink = string.Empty;
    private string streamingPlatform = string.Empty;
    private ContentType spaceType = ContentType.Other;
    private string connectionStatus = "Disconnected";
    private bool isReady = false;
    private int readyUserCount = 0;
    private int totalUserCount = 0;
    private bool countdownStarted = false;
    private User currentUser;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            currentUser = await UserService.GetUserAsync();

            // Retrieve the space name using the spaceId
            var space = await SpaceService.GetSpace(spaceId);

            if (space != null)
            {
                spaceName = space.Name ?? string.Empty;
                streamingLink = space.StreamingLink ?? string.Empty;
                streamingPlatform = space.StreamingPlatform ?? string.Empty;
                spaceType = space.ContentType ?? ContentType.Other;
                contentTitle = space.ContentTitle ?? string.Empty;

                SignalRService.OnReadyUserCountUpdated += UpdateReadyUserCount;
                SignalRService.OnTotalUserCountUpdated += UpdateTotalUserCount;
                SignalRService.OnConnectionStatusChanged += UpdateConnectionStatus;

                await SignalRService.StartConnectionAsync();
                await SignalRService.JoinSpace(spaceId, currentUser);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching space: {ex.Message}");
        }
    }

    private void UpdateReadyUserCount(int count)
    {
        readyUserCount = count;
        StateHasChanged();
    }

    private void UpdateTotalUserCount(int count)
    {
        totalUserCount = count;
        StateHasChanged();
    }

    private void UpdateConnectionStatus(string status)
    {
        connectionStatus = status;
        StateHasChanged();
    }

    private async Task OnReadyPress()
    {
        isReady = true;
        await SignalRService.SetUserReady(spaceId, currentUser.Id, true);
        CheckAllUsersReady();
    }

    private async Task OnReadyRelease()
    {
        isReady = false;
        await SignalRService.SetUserReady(spaceId, currentUser.Id, false);
    }

    private void CheckAllUsersReady()
    {
        if (readyUserCount == totalUserCount && totalUserCount > 0 && !countdownStarted)
        {
            countdownStarted = true;
            StartCountdown();
        }
    }

    private async void StartCountdown()
    {
        for (int i = 3; i > 0; i--)
        {
            await Task.Delay(1000);
            // Update UI with countdown (optional)
        }
        // Play sound and show "Press Play" message
        await JsRuntime.InvokeVoidAsync("playSound");
        countdownStarted = false;
    }

    private async Task CopySpaceId()
    {
        await JsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", spaceId);
    }

    private string GetConnectionStatusIcon()
    {
        return connectionStatus switch
        {
            "Connected" => Icons.Material.Filled.Circle,
            "Disconnected" => Icons.Material.Filled.Circle,
            _ => Icons.Material.Filled.Warning
        };
    }

    private Color GetConnectionStatusColor()
    {
        return connectionStatus switch
        {
            "Connected" => Color.Success,
            "Disconnected" => Color.Error,
            _ => Color.Warning
        };
    }
}
